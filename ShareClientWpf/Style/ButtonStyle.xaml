<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:ShareClientWpf">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="SolidColorBrushStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <local:IconSizeConverter x:Key="IconConverter" />

    <ControlTemplate x:Key="DefaultButtonTemplate" TargetType="{x:Type ButtonBase}">

        <Border
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            Background="{TemplateBinding Background}"
            CornerRadius="6">

            <TextBlock
                HorizontalAlignment="Center"
                FontSize="24"
                Foreground="{TemplateBinding Foreground}"
                Text="{TemplateBinding Content}" />

        </Border>
    </ControlTemplate>

    <Style x:Key="DefaultButtonStyle" TargetType="{x:Type ButtonBase}">

        <Setter Property="Template" Value="{StaticResource DefaultButtonTemplate}" />
        <Setter Property="Background" Value="{StaticResource ButtonBackGround}" />
        <Setter Property="Foreground" Value="{StaticResource ButtonForeGround}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonMouseOver}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AccentButtonStyle" TargetType="{x:Type ButtonBase}">

        <Setter Property="Template" Value="{StaticResource DefaultButtonTemplate}" />
        <Setter Property="Background" Value="{Binding ThemeBrush, RelativeSource={RelativeSource FindAncestor, AncestorType=local:WindowBase}}" />
        <Setter Property="Foreground" Value="{StaticResource ButtonForeGround}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonMouseOver}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="TextToggleButtonTemplate" TargetType="{x:Type ToggleButton}">

        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="auto" />
            </Grid.RowDefinitions>

            <TextBlock
                x:Name="ContentText"
                HorizontalAlignment="Center"
                FontSize="{TemplateBinding FontSize}"
                Foreground="{TemplateBinding Foreground}"
                Text="{TemplateBinding Content}" />

            <Border
                x:Name="UnderLine"
                Grid.Row="1"
                Margin="0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Bottom"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Visibility="Hidden" />

        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="ContentText" Property="Foreground" Value="{StaticResource ButtonMouseOver}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="UnderLine" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <Style x:Key="TextToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{StaticResource ButtonForeGround}" />
        <Setter Property="BorderBrush" Value="{Binding ThemeBrush, RelativeSource={RelativeSource FindAncestor, AncestorType=local:WindowBase}}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Template" Value="{StaticResource TextToggleButtonTemplate}" />
    </Style>

    <ControlTemplate x:Key="SelectToggleButtonTemplate" TargetType="{x:Type ToggleButton}">

        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition />
            </Grid.RowDefinitions>

            <Border
                x:Name="SelectBorder"
                Margin="8,0,8,0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Top"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="4"
                Visibility="Hidden" />

            <ContentPresenter Grid.Row="1" />

        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="SelectBorder" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <Style x:Key="SelectToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="BorderBrush" Value="{Binding ThemeBrush, RelativeSource={RelativeSource FindAncestor, AncestorType=local:WindowBase}}" />
        <Setter Property="BorderThickness" Value="4" />
        <Setter Property="Template" Value="{StaticResource SelectToggleButtonTemplate}" />
    </Style>

    <Style
        x:Key="DialogButtonStyle"
        BasedOn="{StaticResource DefaultButtonStyle}"
        TargetType="{x:Type ButtonBase}">

        <Setter Property="Margin" Value="4" />
        <Setter Property="Width" Value="100" />
    </Style>

    <Style
        x:Key="DialogAccentButtonStyle"
        BasedOn="{StaticResource AccentButtonStyle}"
        TargetType="{x:Type ButtonBase}">

        <Setter Property="Margin" Value="4" />
        <Setter Property="Width" Value="100" />
    </Style>

    <ControlTemplate x:Key="IconButtonTemplate" TargetType="{x:Type ButtonBase}">

        <Border Background="{TemplateBinding Background}">

            <Viewbox Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">

                <Canvas
                    Width="{TemplateBinding Width,
                                            Converter={StaticResource IconConverter}}"
                    Height="{TemplateBinding Height,
                                             Converter={StaticResource IconConverter}}"
                    Margin="4"
                    HorizontalAlignment="Center"
                    Background="{TemplateBinding Background}">

                    <Path
                        Width="{TemplateBinding Width,
                                                Converter={StaticResource IconConverter}}"
                        Height="{TemplateBinding Height,
                                                 Converter={StaticResource IconConverter}}"
                        Data="{TemplateBinding Content}"
                        Fill="{TemplateBinding Foreground}"
                        Stretch="Uniform" />

                </Canvas>

            </Viewbox>

        </Border>

    </ControlTemplate>

    <Style x:Key="IconButtonStyle" TargetType="{x:Type ButtonBase}">

        <Setter Property="Height" Value="32" />
        <Setter Property="Width" Value="32" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource ButtonForeGround}" />
        <Setter Property="Margin" Value="10" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template" Value="{StaticResource IconButtonTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource ButtonMouseOver}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="IconToggleButtonStyle"
        BasedOn="{StaticResource IconButtonStyle}"
        TargetType="ToggleButton">

        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="{Binding ThemeBrush, RelativeSource={RelativeSource FindAncestor, AncestorType=local:WindowBase}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>